#!/bin/bash
#kiran.vkvr@gmail.com
#https://github.com/Kiran-Bose/supreme

if [[ -f /usr/bin/kbfunctions_basic ]]
then
. /usr/bin/kbfunctions_basic
else
buildpath=$(pwd)
. "$buildpath"/kbfunctions_basic
fi
 
#------------------------------------------------------------------------------------------------
function usbcop ()
{
qbar=1
con=0
mularr=( )
arraymock=( )
usb=/media/"$user"/
if [ "$(ls -A $usb)" ]; then
usbarr=("$usb"*)
colorfmt "${usbarr[@]}"
instfmt "select USB device(s)"
read uc55
v2=$(($j-1))
IFS=', ' read -r -a mularr <<< "$uc55"
	for ucemt in "${mularr[@]}"
	do
		if [[ ($ucemt > $v2) ]]
		then
		con=1
		fi
	done
	v1=$( echo $(numval "$uc55") )
		if [[ ("$v1" == "p") && ($con == 0) ]]
		then
			echo -e "\e[93mChoose an option\n(1)Copy to USB\n(2)Copy from USB\n(3)Move to USB\n(4)Move from USB\e[0m"
			read opt1
			instfmt "Enter 's' for search | 'n' for navigation | 'b' to go back | 'h' to go home"
			read uc11
			for ucemt in "${mularr[@]}"
			do
				case "$opt1" in
				1|3)case "$uc11" in
				    s|S)door NOUSB;;
				    n|N)navig;;
				    b|B)tput reset
					banner
					usbcop;;
				    h|H)supreme;;
				    *)return;;
				    esac;;
				2|4)case "$uc11" in
				    s|S)door USBONLY;;
				    n|N)navig "${usbarr[$ucemt]}";;
				    b|B)tput reset
					banner
					usbcop;;
				    h|H)supreme;;
				    *)return;;
				    esac;;
				esac
				if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
				then
					for element in "${arraymock[@]}"
					do 
						case $opt1 in
						1) kcm -c "$element" "${usbarr[$ucemt]}"/;;
						2) if [[ -d /home/"$user"/Supreme\ media ]]
						then
						kcm -c "$element" /home/"$user"/Supreme\ media/
						else
						mkdir /home/"$user"/Supreme\ media
						kcm -c "$element" /home/"$user"/Supreme\ media/
						fi;;
						3) kcm -m "$element" "${usbarr[$ucemt]}"/;;
						4) if [[ -d /home/"$user"/Supreme\ media ]]
						then
						kcm -m "$element" /home/"$user"/Supreme\ media/
						else
						mkdir /home/"$user"/Supreme\ media
						kcm -m "$element" /home/"$user"/Supreme\ media/
						fi;;
						*)echo -e "\e[91minvalid Choice\e[0m";;
						esac
					done
				else
				return
				fi
			done
		else
		echo -e "\e[91mBad input\e[0m"
		fi
else
echo -e "\e[91mNo USB Device Found\e[0m"
return
fi
}

#------------------------------------------------------------------------------------------------
function andcop ()
{
qbar=1
arraymock=( )
device=/run/user/1000/gvfs/mtp
access=("$device"*)
path="$access"/Internal\ storage

check=$( echo "$path"/* | cut -d '/' -f 8 )
if [ "$check" == "*" ]
then
echo -e "\e[91mNo phone found\e[0m"
else
echo -e "\e[93mSelect an option\n(1)Copy/Move to phone\n(2)Copy/Move from phone\n(3)Sync folders\e[0m"
read ac1
	case "$ac1" in
	1)instfmt "Enter 's' for search | 'n' for navigation | 'b' to go back | 'h' to go home"
	  read ac11
		case "$ac11" in
		s|S)door;;
		n|N)navig;;
		b|B)tput reset
		    banner
		    andcop;;
		h|H)supreme;;
		*)return;;
		esac
		if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
		then
		echo -e "\e[93mSelect action\n(1)Copy\n(2)Move\e[0m"
		read aco1
		else
		return
		fi
		case "$aco1" in
		1)for emt in "${arraymock[@]}"
		  do
		  kcm -c "$emt" "$path"/
		  done;;
		2)for emt in "${arraymock[@]}"
		  do
		  kcm -m "$emt" "$path"/
		  done;;
		*)echo -e "\e[91mBad input\e[0m";;
		esac;;
	2)navig "$path"
	  if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
	  then
	  echo -e "\e[93mSelect action\n(1)Copy\n(2)Move\e[0m"
	  read aco
	  else
	  return
	  fi
		case "$aco" in
		1)for emt2 in "${arraymock[@]}"
		  do
			if [[ -d /home/"$user"/Supreme\ media ]]
			then
			kcm -c "$emt2" /home/"$user"/Supreme\ media/
			else
			mkdir /home/"$user"/Supreme\ media
			kcm -c "$emt2" /home/"$user"/Supreme\ media/
			fi
		  done;;
		2)for emt2 in "${arraymock[@]}"
		  do
			if [[ -d /home/"$user"/Supreme\ media ]]
			then
			kcm -m "$emt2" /home/"$user"/Supreme\ media/
			else
			mkdir /home/"$user"/Supreme\ media
			kcm -m "$emt2" /home/"$user"/Supreme\ media/
			fi
		  done;;
		*)echo -e "\e[91mBad input\e[0m";;
		esac;;
	3)echo -e "\e[93mSelect rsync option(s)\n(1)Bulk rsync\n(2)DCIM\n(3)Videos\e[0m"
	  read ac6
	  IFS=', ' read -r -a arropt4 <<< "$ac6"
		for emt4 in "${arropt4[@]}"
		do
			case $emt4 in
			1) if [[ -d "$path"/DCIM/Camera ]]
			   then
	rsync --ignore-existing -rvv --progress "$path"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
			   fi
			   if [[ -d "$path"/WhatsApp ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/WhatsApp/ /home/"$user"/Phone\ Backup/WhatsApp
			   fi
			   if [[ -d "$path"/SHAREit ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/SHAREit/ /home/"$user"/Phone\ Backup/SHAREit
			   fi
			   if [[ -d "$path"/PicsArt ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/PicsArt/ /home/"$user"/Phone\ Backup/PicsArt
			   fi
			   if [[ -d "$path"/Download ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/Download/ /home/"$user"/Phone\ Backup/Download
			   fi
			   if [[ -d "$path"/Video ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/Video/ /home/"$user"/Phone\ Backup/Download/Video
			   fi
			   if [[ -d "$path"/Pictures ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/Pictures/ /home/"$user"/Phone\ Backup/Pictures
			   fi
			   if [[ -d "$path"/mp3 ]]
			   then
	rsync --ignore-existing -rvv --progress "$path"/mp3/ /home/"$user"/Phone\ Backup/mp3
			   fi
			   return;;
			2) if [[ -d "$path"/DCIM/Camera ]]
			   then
	rsync --ignore-existing -rvv --progress "$path"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
			   fi;;
			3) if [[ -d "$path"/Video ]]
			   then
			   rsync --ignore-existing -rvv --progress "$path"/Video/ /home/"$user"/Phone\ Backup/Download/Video
			   fi;;
			*) echo -e "\e[91mInvalid choice\e[0m";;
			esac
		done;;
	*)echo -e "\e[91mInvalid option\e[0m";;
	esac
fi
}
#------------------------------------------------------------------------------------------------

checkInternet()
{
  ping -c2 github.com > /dev/null 2>&1 || { echo -e "\e[91mError: no active internet connection\e[0m" >&2; return 1; }
}

#------------------------------------------------------------------------------------------------
function cloudconfig ()
{
if [[ -f /home/"$user"/.config/rclone/rclone.conf ]]
then
linecount=$( wc -l /home/"$user"/.config/rclone/rclone.conf | cut -d ' ' -f1 )
	if [[ $linecount == 0 ]]
	then
	rclone config
	fi
	if [[ -f .supremecloud.txt ]]
	then
	sudo rm -f .supremecloud.txt
	fi
	while read line; do
		if [[ "$line" == "["*"]" ]]
		then
		echo $line | cut -d "[" -f2 | cut -d "]" -f1 >> .supremecloud.txt
		fi
	done < /home/"$user"/.config/rclone/rclone.conf
else
rclone config
fi
}
#------------------------------------------------------------------------------------------------
function selectcloud ()
{
cloudlist=()
if [[ -f /home/"$user"/.supremecloud.txt ]]
then
echo -e "\e[93mSelect cloud storage\e[0m"
	while read line; do
	cloudlist+=( "$line" )
	done < .supremecloud.txt
	for ((i=0; i<${#cloudlist[@]}; i++))
	do
	echo -e "\e[93m($i) ${cloudlist[$i]}\e[0m"
	done
	read gdit143
	v55=$( echo $(numval "$gdit143") )
	if [ "$v55" == "p" ]
	then
		if [[ $gdit143 < ${#cloudlist[@]} ]]
		then
		cldopt="${cloudlist[$gdit143]}:/"
		fi
	else
	echo -e "\e[91mBad Input\e[0m"
	fi
else
echo -e "\e[91mCloud Storage not configured. Configure cloud from option Manage Cloud\e[0m"
fi
}

#------------------------------------------------------------------------------------------------
function cloudupload ()
{
checkInternet || return
if [[ -z $cldopt ]]
then
echo -e "\e[91mNo cloud storage selected\e[0m"
return
else
	if [ "${#arraymock[@]}" != 0 ]
	then
	cldactn="copy"
	instfmt "Do you want to upload to a particular directory?(y/n)"
	read gditoptn3
		if [ "$gditoptn3" == "y" ]
		then
		tempmock=( "${arraymock[@]}" )
		cloudnavig
		rcfeed rmc "" "$gdn1"/"${arraymock[0]}" "" 5 
		else
		tempmock=( "${arraymock[@]}" )
		rcfeed rmc "" "$cldopt"
		fi
	arraymock=()
	fi
fi
}

#------------------------------------------------------------------------------------------------
function rcfeed ()
{
dps="${4:+/}"
dpd="${5:+/}"
case "$1" in 
copy)for gdemt15 in "${tempsortfile[@]}"
     do
     rclone copy "$2""$dps""$gdemt15" "$3" -v
     done
     for gdemt15 in "${tempsortdir[@]}"
     do
     rclone copy "$2""$dps""$gdemt15" "$3""$dpd""$gdemt15" -v
     done;;
move)for gdemt15 in "${tempsortfile[@]}"
     do
     rclone move "$2""$dps""$gdemt15" "$3" -v
     done
     for gdemt15 in "${tempsortdir[@]}"
     do
     rclone move "$2""$dps""$gdemt15" "$3""$dpd""$gdemt15" -v
     rcfcount=$(rclone size "$2""$dps""$gdemt15" | sed -n 1p | awk '{print $3}')
	     if [[ $rcfcount == 0 ]]
	     then
	     rclone purge "$2""$dps""$gdemt15"
	     fi 
     done;;
delete)for gdemt4 in "${sortfile[@]}"
       do
       rclone delete $2"$dps""$gdemt4" -v
       done
       for gdemt4 in "${sortdir[@]}"
       do
       rclone purge $2"$dps""$gdemt4" -v
       done;;
rmc)for gdemt15 in "${tempmock[@]}"
    do
    Q=$( echo "$gdemt15" | rev | cut -d '/' -f 1 | rev )
	    if [[ -d "$gdemt15" ]]
	    then
	    rclone $cldactn "$gdemt15" "$3""$dpd""$Q" -v
		    if [ "$cldactn" == "move" ]
		    then
		    rcfcount=$(rclone size "$gdemt15" | sed -n 1p | awk '{print $3}')
			    if [[ $rcfcount == 0 ]]
			    then
			    rclone purge "$gdemt15"
			    fi 
		    fi
	    else					
	    rclone $cldactn "$gdemt15" "$3" -v
	    fi
    done;;
esac
}

#------------------------------------------------------------------------------------------------
function cloudit ()
{
if [[ -f /home/"$user"/.supremecloud.txt ]]
then
checkInternet || return
echo -e "\e[93mSelect an option\n(1)Upload to Cloud\n(2)Download from Cloud\n(3)Delete from Cloud\n(4)Move/Copy Cloud Resource\n(5)Configure Cloud\e[0m"
read gdit1
	if [[ ("$gdit1" == 1) || ("$gdit1" == 2) || ("$gdit1" == 3) ]]
	then
	selectcloud
	fi 
	case "$gdit1" in
	1)feeder
	  cloudupload;;	
	2)cloudnavig
	  if [ "${#arraymock[@]}" != 0 ]
	  then
	  instfmt "Select destinatin folder"
	  feeder
		if [ "${#arraymock[@]}" != 0 ]
		then
			if [ "$gdn1" == "$cldopt" ]
			then
			rcfeed copy $cldopt "${arraymock[0]}" "" 5
			else
			rcfeed copy "$gdn1" "${arraymock[0]}" 4 5
			fi
		fi
	  fi;;
	3)cloudnavig
	  if [ "${#arraymock[@]}" != 0 ]
	  then
	  instfmt "Are you sure you want to delete the selected files from $gdn1?(y/n)"
	  read gdit63
		if [ "$gdit63" == "y" ]
		then
			if [ "$gdn1" == "$cldopt" ]
			then
			rcfeed delete $cldopt
			else
			rcfeed delete "$gdn1" "" 4
			fi
		fi
	  fi;;
	4)echo -e "\e[93mSelect Source\n(1)Cloud storage\n(2)local\e[0m"
	  read gdit44  
		case $gdit44 in
		1)selectcloud
		cloudnavig
		tempsortdir=( "${sortdir[@]}" )
		tempsortfile=( "${sortfile[@]}" )
		gdntemp="$gdn1"
		cldtemp="$cldopt";;
		2)feeder
		tempmock=( "${arraymock[@]}" );;
		*)return;;
		esac
		if [[ ("${#tempmock[@]}" == 0) && ("${#tempsortdir[@]}" == 0) && ("${#tempsortfile[@]}" == 0) ]]
		then
		return
		else
		echo -e "\e[93mSelect Destination\n(1)cloud storage\n(2)local\e[0m"
		read gdit55
			case $gdit55 in
			1)selectcloud
			cloudnavig;;
			2)feeder;;
			*)return;;
			esac
			echo -e "\e[93mSelect action\n(1)Move\n(2)Copy\e[0m"
			read gdit77
			case $gdit77 in
			1)cldactn="move";;
			2)cldactn="copy";;
			*)return;;
			esac
			if [[ ("$gdit44" == 2) && ("$gdit55" != 2) ]]
			then
				if [[ ("$gdn1" == "$cldopt") && ("${#arraymock[@]}" == 0) ]]
				then
				rcfeed rmc "" "$gdn1"
				else
				rcfeed rmc "" "$gdn1"/"${arraymock[0]}" "" 5 
				fi
			elif [[ ("$gdit44" != 2) && ("$gdit55" = 2) ]]
			then
				if [ "$gdn1" == "$cldopt" ]
				then
					if [ "${#arraymock[@]}" == 0 ]
					then
					echo -e "\e[91mNo destination directory selected\e[0m"
					else
					rcfeed $cldactn "$gdn1" "${arraymock[0]}" "" 5
					fi
				else
					if [ "${#arraymock[@]}" == 0 ]
					then
					echo -e "\e[91mNo destination directory selected\e[0m"
					else
					rcfeed $cldactn "$gdn1" "${arraymock[0]}" 4 5
					fi
				fi
			elif [[ ("$gdit44" == 2) && ("$gdit55" == 2) ]]
			then
			echo -e "\e[91mplease use 'Manage files' if no cloud interaction\e[0m"
			return
			else
				if [[ ("$gdn1" == "$cldopt") && ("$gdntemp" == "$cldtemp") ]]
				then
				echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
					if [ "${#arraymock[@]}" == 0 ]
					then
					rcfeed $cldactn "$gdntemp" "$gdn1"
					else
					rcfeed $cldactn "$gdntemp" "$gdn1""${arraymock[0]}" "" 5
					fi
				elif [[ ("$gdn1" != "$cldopt") && ("$gdntemp" == "$cldtemp") ]]
				then
				echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
				rcfeed $cldactn "$gdntemp" "$gdn1"/"${arraymock[0]}" "" 5
				elif [[ ("$gdn1" == "$cldopt") && ("$gdntemp" != "$cldtemp") ]]
				then
				echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
					if [ "${#arraymock[@]}" == 0 ]
					then
					rcfeed $cldactn "$gdntemp" "$gdn1" 4
					else
					rcfeed $cldactn "$gdntemp" "$gdn1""${arraymock[0]}" 4 5 
					fi
				elif [[ ("$gdn1" != "$cldopt") && ("$gdntemp" != "$cldtemp") ]]
				then
				echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
				rcfeed $cldactn "$gdntemp" "$gdn1"/"${arraymock[0]}" 4 5
				fi
			fi
		fi;;
	5)checkInternet || return
	  rclone config;;	
	*)echo -e "\e[91mBad input\e[0m";;	
	esac
else
echo -e "\e[91mCloud Storage not configured\e[0m"
fi
}
#------------------------------------------------------------------------------------------------
user=$(whoami)
if [ "$user" == "root" ]
then
echo -e "\e[91msupreme doesn't work for root user\e[0m"
else
again="y"
while [ "$again" == "y" ]
do
tput reset
qbar=1
flag=0
opnr="y"
banner
echo -e "\e[93mSelect an option\e[0m\n(1)\e[32m⏏\e[0m  Open Apps\n(2)\e[93m📂\e[0m Manage Files \n(3)📱 Manage Phone\n(4)\e[91m🎞\e[0m  Manage USB\n(5)\e[94m🌩 \e[0m Manage Cloud\n(x)\e[91m✖\e[0m  Exit"
	while [ "$opnr" == "y" ]
	do
	read opn2
		case "$opn2" in
		1)echo -e "\e[93mSelect an option | 'b' to go back\n\e[0m(1)\e[94m🌐\e[0m Fire Fox\n(2)\e[93m📅\e[0m Calculator\n(3)🛠  Settings\e[0m"
		  while [ "$opnr" == "y" ]
		  do
		  read opn209
			case $opn209 in
			1)opnr="e"
			if command -v firefox &>/dev/null; then
			firefox
			else
			echo -e "\e[91mFirefox not installed\e[0m"
			fi;;
			2)opnr="e"
			if command -v gnome-calculator &>/dev/null; then
			gnome-calculator
			else
			echo -e "\e[91mgnome-calculator not installed\e[0m"
			fi;;
			3)opnr="e"
			if command -v gnome-control-center &>/dev/null; then
			gnome-control-center
			else
			echo -e "\e[91mgnome-control-center not installed\e[0m"
			fi;;
			b)opnr="e"
			supreme;;
			esac
		  done
		  echo -e "\e[41;97;10;85mEnter any key\e[0m"
		  read delay;;
		2)while [ "$opnr" == "y" ]
		  do
		  feeder
			if [ "${#arraymock[@]}" != 0 ]
			then
			opnr="e"
			echo -e "\e[93mSelect option\n\e[0m(1)\e[32m⏏\e[0m  Open\n(2)\e[90m📖\e[0m Copy\n(3)\e[95m📑\e[0m Move\n(4)\e[91m🚮\e[0m Delete\n(5)\e[36m📓\e[0m Rename\n(6)\e[94m➡\e[0m  Send to Device\n(7)\e[92m⬆\e[0m  Upload to Cloud\n(8)\e[96mℹ\e[0m  Properties\e[0m\n(h)\e[93m🏠\e[0m Go Home"
				while [ "$opnr" == "e" ]
				do
				read opn11
					case $opn11 in
					1)opnr="f"
					for opnemt in "${arraymock[@]}"
					do
					xdg-open "$opnemt"
					done;;
					2)opnr="f"
					tempmock=( "${arraymock[@]}" )
					while [ "$opnr" == "f" ]
					do
					instfmt "Select destination folder"
					feeder
					if [[ -d "${arraymock[0]}" ]]
					then
					opnr="g"
						for opnemt in "${tempmock[@]}"
						do
						kcm -c "$opnemt" "${arraymock[0]}"
						done
					else
					echo -e "\e[91mNot a directory\e[0m"
					fi
					done;;
					3)opnr="f"
					tempmock=( "${arraymock[@]}" )
					while [ "$opnr" == "f" ]
					do
					instfmt "Select destination folder"
					feeder
					if [[ -d "${arraymock[0]}" ]]
					then
					opnr="g"
						for opnemt in "${tempmock[@]}"
						do
						qbar=0
						kcm -m "$opnemt" "${arraymock[0]}"
						done
					else
					echo -e "\e[91mNot a directory\e[0m"
					fi
					done;;
					4)opnr="f"
					instfmt "Are you sure you want to delete the file(s)?(y/n)"
					read opn032
					if [ "$opn032" == "y" ]
					then 
						for opnemt in "${arraymock[@]}"
						do
							if [[ "$opnemt" = *"/1000/gvfs/mtp"* ]]
							then
								if [[ -d /home/"$user"/Supremetemp ]]
								then
								kcm -m "$opnemt" /home/"$user"/Supremetemp/
								else
								mkdir /home/"$user"/Supremetemp
								kcm -m "$opnemt" /home/"$user"/Supremetemp/
								fi 
							sudo rm -vrf /home/"$user"/Supremetemp/*
							else
							sudo rm -vrf "$opnemt"
							fi
						done
					fi;;
					5)opnr="f"
					Q=$( echo "${arraymock[0]}" | rev | cut -d '/' -f 1 | rev )
					R=$( echo "${arraymock[0]}" | rev | cut -d '/' -f2- | rev )
					echo -e "\e[93mCurrent Name: $Q\e[0m"
					echo -e "\e[93mEnter New Name\e[0m"
					read newname
					instfmt "Are you sure you want to rename $Q to $newname?(y/n)"
					read opn88
					if [ "$opn88" == "y" ]
					then
					mv "${arraymock[0]}" "$R"/"$newname"
					fi;;
					6)opnr="f"
					quick f
					if [ "${#quickarray[@]}" != 0 ]
					then
					instfmt "Select Device | Enter 'h' to go home"
						while [ "$opnr" == "f" ]
						do
						read opn99
						v111=$( echo $(numval "$opn99") )
							if [[ ("$v111" == "p") && ( $opn99 < $i ) ]]
							then
							opnr="g"
								for opnemt in "${arraymock[@]}"
								do
								kcm -c "$opnemt" "${quickarray[$opn99]}"
								done
							elif [ "$opn99" == "h" ]
							then
							opnr="g"
							supreme  
							else
							echo -e "\e[91mBad input\e[0m"
							fi
						done
					else
					return
					fi;;
					7)opnr="f"
					rcver=$( rclone -V | sed -n 1p | cut -d ' ' -f2 )
					if [[ "$rcver" != "v1.4"* ]]
					then
					curl https://rclone.org/install.sh | sudo bash
					fi
					instfmt "Select cloud storage"
					selectcloud
					cloudupload;;
					8)opnr="f"
					for opnemt in "${arraymock[@]}"
					do
					echo -e "________________________________________________________________________________"
					det "$opnemt"
					done;;
					h)opnr="f"
					supreme;;
					*)
					echo -e "\e[91mInvalid Choice\e[0m";;
					esac
				done
			else
			echo -e "\e[91mBad input\e[0m"
			fi
		  done
		  echo -e "\e[41;97;10;85mEnter any key\e[0m"
		  read delay;;
		3)opnr="e"
		  andcop
		  echo -e "\e[41;97;10;85mEnter any key\e[0m"
		  read delay;;
		4)opnr="e"
		  usbcop
		  echo -e "\e[41;97;10;85mEnter any key\e[0m"
		  read delay;;
		5)opnr="e"
		  instfmt "Supreme uses package 'rclone' for cloud storage operations"
		  cloudconfig
		  rcver=$( rclone -V | sed -n 1p | cut -d ' ' -f2 )
			if [[ "$rcver" != "v1.4"* ]]
			then
			curl https://rclone.org/install.sh | sudo bash
			fi
		   cloudit
		  echo -e "\e[41;97;10;85mEnter any key\e[0m"
		  read delay;;
		x)instfmt "To report bug: mail to kiran.vkvr@gmail.com or visit https://github.com/Kiran-Bose/supreme"
		  exec bash
		  return;;
		*)echo -e "\e[91mBad input\e[0m";;
		esac
	done
done
fi

#------------------------------------------------------------------------------------------------

