#!/bin/bash
#kiran.vkvr@gmail.com

. /usr/bin/kbfunctions_basic
. /usr/bin/progress_bar
 
#------------------------------------------------------------------------------------------------
function usbcop ()
{
qbar=1
con=0
mularr=( )
arraymock=( )
usb=/media/"$user"/
if [ "$(ls -A $usb)" ]; then
   usbarr=("$usb"*)
   for ((q=0; q<${#usbarr[@]}; q++)); do
   echo "(${q}) ${usbarr[$q]}"
   done
echo -e "\e[93mselect USB device(s)\e[0m"
read uc55
v2=$(($q-1))
IFS=', ' read -r -a mularr <<< "$uc55"
for ucemt in "${mularr[@]}"
do
if [[ ($ucemt > $v2) ]]
then
con=1
fi
done
v1=$( echo $(numval "$uc55") )
echo "$v1"
if [[ ("$v1" == "p") && ($con == 0) ]]
then
	echo -e "\e[93mSelect an option\n(1)Copy to USB\n(2)Copy from USB\n(3)Move to USB\n(4)Move from USB\e[0m"
	read opt1
	echo -e "\e[93mEnter 's' for search | 'n' for navigation\e[0m"
	read uc11
	for ucemt in "${mularr[@]}"
	do
		if [[ ("$opt1" == 1) || ("$opt1" == 3) ]]
		then
			if [ "$uc11" == "s" ]
			then
			door NOUSB
			elif [ "$uc11" == "n" ]
			then
			navig
			else
			return
			fi
		elif [[ ("$opt1" == 2) || ("$opt1" == 4) ]]
		then
			if [ "$uc11" == "s" ]
			then
			door USBONLY
			elif [ "$uc11" == "n" ]
			then
			navig "${usbarr[$ucemt]}"
			else
			return
			fi
		fi
		if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
		then
			for element in "${arraymock[@]}"
			do 
			feedemt=$(echo "$element" | rev | cut -d '/' -f 1 | rev)
				case $opt1 in
				1) cp -rv "$element" "${usbarr[$ucemt]}"/ | kbbar "$element" "${usbarr[$ucemt]}"/"$feedemt";;
				2) cp -rv "$element" /home/"$user"/Supreme\ media | kbbar "$element" /home/"$user"/Supreme\ media/"$feedemt";;
				3) mv -v "$element" "${usbarr[$ucemt]}"/ | kbbar "$element" "${usbarr[$ucemt]}"/"$feedemt";;
				4) mv -v "$element" /home/"$user"/Supreme\ media | kbbar "$element" /home/"$user"/Supreme\ media/"$feedemt";;
				*)echo -e "\e[91minvalid Choice\e[0m";;
				esac
			done
		else
		return
		fi
	done
else
echo -e "\e[91mBad input\e[0m"
fi
else
    echo -e "\e[91mNo USB Device Found\e[0m"
   return
fi
}

#------------------------------------------------------------------------------------------------
function andcop ()
{
qbar=1
arraymock=( )
device=/run/user/1000/gvfs/mtp
access=("$device"*)
path="$access"/Internal\ storage

check=$( echo "$path"/* | cut -d '/' -f 8 )
if [ "$check" == "*" ]
then
echo -e "\e[91mNo Phone Found\e[0m"
else
echo -e "\e[93mSelect an option\n(1)Copy/Move to phone\n(2)Copy/Move from phone\n(3)Sync folders\e[0m"
read ac1
if [ "$ac1" == 1 ]
then
	echo -e "\e[93mEnter 's' for search | 'n' for navigation\e[0m"
	read ac11
	if [ "$ac11" == "s" ]
	then
	door
	elif [ "$ac11" == "n" ]
	then
	navig
	else
	return
	fi
	if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
	then
	echo -e "\e[93mSelect action\n(1)Copy\n(2)Move\e[0m"
	read aco1
	else
	return
	fi
	if [ "$aco1" == 1 ]
	then
		for emt in "${arraymock[@]}"
		do
		feedemt=$(echo "$emt" | rev | cut -d '/' -f 1 | rev)
		cp -rv "$emt" "$path"/ | kbbar "$emt" "$path"/"$feedemt"
		done
	elif [ "$aco1" == 2 ]
	then
		for emt in "${arraymock[@]}"
		do
		feedemt=$(echo "$emt" | rev | cut -d '/' -f 1 | rev)
		mv -v "$emt" "$path"/ | kbbar "$emt" "$path"/"$feedemt"
		done
	else
	echo -e "\e[91mBad input\e[0m"
	fi
elif [ "$ac1" == 2 ]
then
	navig "$path"
	if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
	then
	echo -e "\e[93mSelect action\n(1)Copy\n(2)Move\e[0m"
	read aco
	else
	return
	fi
	if [ "$aco" == 1 ]
	then
		for emt2 in "${arraymock[@]}"
		do
		feedemt=$(echo "$emt2" | rev | cut -d '/' -f 1 | rev)
		cp -rv "$emt2" /home/"$user"/Supreme\ media | kbbar "$emt2" /home/"$user"/Supreme\ media/"$feedemt"
		done
	elif [ "$aco" == 2 ]
	then
		for emt2 in "${arraymock[@]}"
		do
		feedemt=$(echo "$emt2" | rev | cut -d '/' -f 1 | rev)
		mv -v "$emt2" /home/"$user"/Supreme\ media | kbbar "$emt2" /home/"$user"/Supreme\ media/"$feedemt"
		done
	else 
	echo -e "\e[91mBad input\e[0m"
	fi
elif [ "$ac1" == 3 ]
then
	echo -e "\e[93mSelect rsync option(s)\n(1)Bulk rsync\n(2)DCIM\n(3)Videos\e[0m"
	read ac6
	IFS=', ' read -r -a arropt4 <<< "$ac6"
	for emt4 in "${arropt4[@]}"
	do
		case $emt4 in
		1) if [[ -d "$path"/DCIM/Camera ]]
		then
rsync --ignore-existing -rvv --progress "$path"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
		fi
		if [[ -d "$path"/WhatsApp ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/WhatsApp/ /home/"$user"/Phone\ Backup/WhatsApp
		fi
		if [[ -d "$path"/SHAREit ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/SHAREit/ /home/"$user"/Phone\ Backup/SHAREit
		fi
		if [[ -d "$path"/PicsArt ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/PicsArt/ /home/"$user"/Phone\ Backup/PicsArt
		fi
		if [[ -d "$path"/Download ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/Download/ /home/"$user"/Phone\ Backup/Download
		fi
		if [[ -d "$path"/Video ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/Video/ /home/"$user"/Phone\ Backup/Download/Video
		fi
		if [[ -d "$path"/Pictures ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/Pictures/ /home/"$user"/Phone\ Backup/Pictures
		fi
		if [[ -d "$path"/mp3 ]]
		then
rsync --ignore-existing -rvv --progress "$path"/mp3/ /home/"$user"/Phone\ Backup/mp3
		fi
		return;;
		2) if [[ -d "$path"/DCIM/Camera ]]
		then
rsync --ignore-existing -rvv --progress "$path"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
		fi;;
		3)if [[ -d "$path"/Video ]]
		then
		rsync --ignore-existing -rvv --progress "$path"/Video/ /home/"$user"/Phone\ Backup/Download/Video
		fi;;
		*) echo -e "\e[91mInvalid choice\e[0m";;
		esac
	done
else
echo -e "\e[91mInvalid option\e[0m"
fi
fi
}


#------------------------------------------------------------------------------------------------
user=$(whoami)
if [ "$user" == "root" ]
then
echo -e "\e[91msupreme doesn't work for root user\e[0m"
else
qbar=1
flag=0
opnr="y"
echo -e "\e[40;33;10;85m❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇\e[103;30;10;85m ⏩ Do it the terminal way ⏪ \e[0m\e[40;33;10;85m❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇ \e[0m"
echo -e "\e[107;34;10;85m❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇\e[44;97;10;85m ⏩ The Supreme user module ⏪ \e[0m\e[107;34;10;85m❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇❇ \e[0m"
echo -e "\e[93mSelect an option\e[0m\n(1)\e[32m⏏\e[0m  Open Apps\n(2)\e[93m📂\e[0m Manage files \n(3)📱 Manage Phone\n(4)\e[91m🎞\e[0m  Manage USB"
while [ "$opnr" == "y" ]
do
read opn2
if [ "$opn2" == 1 ]
then
echo -e "\e[93mSelect an option | 'b' to go back\n\e[0m(1)\e[94m🌐\e[0m Fire Fox\n(2)\e[93m📅\e[0m Calculator\n(3)🛠  Settings\e[0m"
while [ "$opnr" == "y" ]
do
read opn209
	case $opn209 in
	1)opnr="e"
	if command -v firefox &>/dev/null; then
	firefox
	else
	echo -e "\e[91mFirefox not installed\e[0m"
	fi;;
	2)opnr="e"
	if command -v gnome-calculator &>/dev/null; then
	gnome-calculator
	else
	echo -e "\e[91mgnome-calculator not installed\e[0m"
	fi;;
	3)opnr="e"
	if command -v gnome-control-center &>/dev/null; then
	gnome-control-center
	else
	echo -e "\e[91mgnome-control-center not installed\e[0m"
	fi;;
	b)opnr="e"
	supreme;;
	esac
done
elif [ "$opn2" == 2 ]
then
	while [ "$opnr" == "y" ]
	do
	feeder
		if [ "${#arraymock[@]}" != 0 ]
		then
		opnr="e"
			echo -e "\e[93mSelect option\n\e[0m(1)\e[32m⏏\e[0m  Open-->For files\n(2)\e[90m📖\e[0m Copy\n(3)\e[95m📑\e[0m Move\n(4)\e[91m🚮\e[0m Delete\n(5)\e[36m📓\e[0m Rename\n(6)\e[94m➡\e[0m  Send to Device\n(7)\e[96mℹ\e[0m  Properties\e[0m"
			while [ "$opnr" == "e" ]
			do
			read opn11
				case $opn11 in
				1)opnr="f"
				for opnemt in "${arraymock[@]}"
				do
				xdg-open "$opnemt"
				done;;
				2)opnr="f"
				tempmock=( "${arraymock[@]}" )
				while [ "$opnr" == "f" ]
				do
				echo -e "\e[93mSelect destination folder\e[0m"
				feeder
				if [[ -d "${arraymock[0]}" ]]
				then
				opnr="g"
					for opnemt in "${tempmock[@]}"
					do
					feedemt=$(echo "$opnemt" | rev | cut -d '/' -f 1 | rev)
					cp -rv "$opnemt" "${arraymock[0]}" | kbbar "$opnemt" "${arraymock[0]}"/"$feedemt"
					done
				else
				echo -e "\e[91mNot a directory\e[0m"
				fi
				done;;
				3)opnr="f"
				tempmock=( "${arraymock[@]}" )
				while [ "$opnr" == "f" ]
				do
				echo -e "\e[93mSelect destination folder\e[0m"
				feeder
				if [[ -d "${arraymock[0]}" ]]
				then
				opnr="g"
					for opnemt in "${tempmock[@]}"
					do
					qbar=0
					feedemt=$(echo "$opnemt" | rev | cut -d '/' -f 1 | rev)
					mv -v "$opnemt" "${arraymock[0]}" | kbbar "$opnemt" "${arraymock[0]}"/"$feedemt"
					done
				else
				echo -e "\e[91mNot a directory\e[0m"
				fi
				done;;
				4)opnr="f"
				echo -e "\e[93mAre you sure you want to delete the file(s)?(y/n)\e[0m"
				read opn032
				if [ "$opn032" == "y" ]
				then 
					for opnemt in "${arraymock[@]}"
					do
						if [[ "$opnemt" = *"/1000/gvfs/mtp"* ]]
						then
						feedemt=$(echo "$opnemt" | rev | cut -d '/' -f 1 | rev)
						mv -v "$opnemt" "/home/"$user"/Supremetemp" | kbbar "$opnemt" "/mnt/9C1A6EB51A6E8BD8/Supremetemp"/"$feedemt" 
						sudo rm -vrf /home/"$user"/Supremetemp/*
						else
						sudo rm -vrf "$opnemt"
						fi
					done
				fi;;
				5)opnr="f"
				Q=$( echo "${arraymock[0]}" | rev | cut -d '/' -f 1 | rev )
				R=$( echo "${arraymock[0]}" | rev | cut -d '/' -f2- | rev )
				echo -e "\e[93mCurrent Name: $Q\e[0m"
				echo -e "\e[93mEnter New Name\e[0m"
				read newname
				echo -e "\e[93mAre you sure you want to rename $Q to $newname ?(y/n)\e[0m"
				read opn88
				if [ "$opn88" == "y" ]
				then
				mv "${arraymock[0]}" "$R"/"$newname"
				else
				return
				fi;;
				6)opnr="f"
				quick f
				if [ "${#quickarray[@]}" != 0 ]
				then
				echo -e "\e[93mSelect Device\e[0m"
					while [ "$opnr" == "f" ]
					do
					read opn99
					v111=$( echo $(numval "$opn99") )
						if [[ ("$v111" == "p") && ( $opn99 < $i ) ]]
						then
						opnr="g"
							for opnemt in "${arraymock[@]}"
							do
							feedemt=$(echo "$opnemt" | rev | cut -d '/' -f 1 | rev)
							cp -rv "$opnemt" "${quickarray[$opn99]}" | kbbar "$opnemt" "${quickarray[$opn99]}"/"$feedemt"
							done  
						else
						echo -e "\e[91mBad input\e[0m"
						fi
					done
				else
				return
				fi;;
				7)opnr="f"
				for opnemt in "${arraymock[@]}"
				do
				echo -e "________________________________________________________________________________"
				det "$opnemt"
				done;;
				*)
				echo -e "\e[91mInvalid Choice\e[0m";;
				esac
			done
		else
		echo -e "\e[91mBad input\e[0m"
		fi
	done
elif [ "$opn2" == 3 ]
then
opnr="e"
andcop
elif [ "$opn2" == 4 ]
then
opnr="e"
usbcop
fi
done
fi

#------------------------------------------------------------------------------------------------

