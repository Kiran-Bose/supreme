#!/bin/bash
#kiran.vkvr@gmail.com
#https://github.com/Kiran-Bose/supreme

if [[ -f /usr/bin/kbfunctions_basic ]]
then
. /usr/bin/kbfunctions_basic
elif [[ -f /usr/local/bin/kbfunctions_basic ]]
then
. /usr/local/bin/kbfunctions_basic
else
buildpath=$(pwd)
. "$buildpath"/kbfunctions_basic
fi
 
#------------------------------------------------------------------------------------------------
function usbcop ()
{
qbar=1
mularr=()
arraymock=()
usb_check
if [[ "${#usbarr[@]}" != 0 ]]
then
colorfmt "${usbarr[@]}"
instfmt "Select USB device"
read uc55
v1=$( echo $(numval "$uc55") )
	if [[ "$v1" == "p" ]]
	then
		if (($uc55<$j)) > /dev/null 2>&1
		then
		instfmt "Select an option"
		echo -e "(1)USB File Explorer\n(2)Format"
		read opt1
			case "$opt1" in
			1)instfmt "s [Search] | n [Navigate] | b [Back] | h [Home]"
			  read uc11
			  case "$uc11" in
			  s)srch11="${usbarr[$uc55]}"
			    door UD
			    unset srch11;;
			  n)navig "${usbarr[$uc55]}";;
			  b)usbcop
			    unset arraymock;;
			  h)homekey="y";;
			  *)return;;
			  esac
			  if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
			  then
			  opnr="e"
			  operations
			  else
			  return
			  fi;;
			2)fsys=$(df -h "${usbarr[$uc55]}" | awk '{print $1}' | sed 1d)
			  instfmt "Are you sure you want to format ${usbarr[$uc55]}?(y/n)"
			  echo -e "\e[91mWarning: This is irreversible and will erase everything\e[0m"
			  read uc88
			  case "$uc88" in
			  y|Y)sudo umount "$fsys"
			      instfmt "Select a File System"
			      echo -e "(1)FAT\n(2)vFat\n(3)NTFS\n(4)EXT4"
			      read uc99
			      case "$uc99" in
			      1)sudo mkfs.fat -n "${vendorname[$uc55]}" -I "$fsys";;
			      2)sudo mkfs.vfat -n "${vendorname[$uc55]}" -I "$fsys";;
			      3)sudo mkfs.ntfs -n "${vendorname[$uc55]}" -I "$fsys";;
			      4)sudo mkfs.ext4 -n "${vendorname[$uc55]}" -I "$fsys";;
			      *)echo -e "\e[91Bad Input\e[0m";;
			      esac;;
			  *)return;;
			  esac;;
			*)echo -e "\e[91mBad input\e[0m"
			  return;;
			esac
		else
		echo -e "\e[91mBad input\e[0m"
		fi
	else
	echo -e "\e[91mBad input\e[0m"
	fi
else
echo -e "\e[91mNo USB Device Found\e[0m"
return
fi
}

#------------------------------------------------------------------------------------------------
function andcop ()
{
qbar=1
arraymock=()
device=/run/user/1000/gvfs/mtp
access=( "$device"* )
path=( "${access[0]}"/* )
if [[ "${path[@]}" == *"*"* ]]
then
echo -e "\e[91mNo phone found\e[0m"
else
colorfmt "${path[@]}"
instfmt "Select Storage"
read ac32
v7=$( echo $(numval "$ac32") )
	if [[ "$v7" == "p" ]]
	then
		if(($ac32<$j)) > /dev/null 2>&1
		then
		storage="${path[$ac32]}"
		else
		echo -e "\e[91mBad Input\e[0m"
		return
		fi
	else
	echo -e "\e[91mBad Input\e[0m"
	return
	fi
instfmt "Select an option"
echo -e "(1)Phone File Explorer\n(2)Sync Folders"
read ac1
	case "$ac1" in
	1)navig "$storage"
	  if [[ ("$v11" == "p") && ("${#arraymock[@]}" != 0) ]]
	  then
	  opnr="e"
	  operations
	  else
	  return
	  fi;;
	2)instfmt "Select rsync option(s)"
	  echo -e "(1)Bulk rsync\n(2)DCIM\n(3)Videos"
	  read ac6
	  IFS=', ' read -r -a arropt4 <<< "$ac6"
		for emt4 in "${arropt4[@]}"
		do
			case $emt4 in
			1) if [[ -d "$storage"/DCIM/Camera ]]
			   then
	rsync --ignore-existing -rvv --progress "$storage"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
			   fi
			   if [[ -d "$storage"/WhatsApp ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/WhatsApp/ /home/"$user"/Phone\ Backup/WhatsApp
			   fi
			   if [[ -d "$storage"/SHAREit ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/SHAREit/ /home/"$user"/Phone\ Backup/SHAREit
			   fi
			   if [[ -d "$storage"/PicsArt ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/PicsArt/ /home/"$user"/Phone\ Backup/PicsArt
			   fi
			   if [[ -d "$storage"/Download ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/Download/ /home/"$user"/Phone\ Backup/Download
			   fi
			   if [[ -d "$storage"/Video ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/Video/ /home/"$user"/Phone\ Backup/Download/Video
			   fi
			   if [[ -d "$storage"/Pictures ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/Pictures/ /home/"$user"/Phone\ Backup/Pictures
			   fi
			   if [[ -d "$storage"/mp3 ]]
			   then
	rsync --ignore-existing -rvv --progress "$storage"/mp3/ /home/"$user"/Phone\ Backup/mp3
			   fi
			   return;;
			2) if [[ -d "$storage"/DCIM/Camera ]]
			   then
	rsync --ignore-existing -rvv --progress "$storage"/DCIM/Camera/ /home/"$user"/Phone\ Backup/Camera
			   fi;;
			3) if [[ -d "$storage"/Video ]]
			   then
			   rsync --ignore-existing -rvv --progress "$storage"/Video/ /home/"$user"/Phone\ Backup/Download/Video
			   fi;;
			*) echo -e "\e[91mInvalid choice\e[0m";;
			esac
		done;;
	*)echo -e "\e[91mInvalid option\e[0m";;
	esac
fi
}
#------------------------------------------------------------------------------------------------

checkInternet()
{
  ping -c2 github.com > /dev/null 2>&1 || { echo -e "\e[91mError: no active internet connection\e[0m" >&2; return 1; }
}

#------------------------------------------------------------------------------------------------
function cloudconfig ()
{
if [[ -f /home/"$user"/.config/rclone/rclone.conf ]]
then
linecount=$( wc -l /home/"$user"/.config/rclone/rclone.conf | cut -d ' ' -f1 )
	if [[ $linecount == 0 ]]
	then
	rclone config
	fi
	if [[ -f /home/"$user"/.supremecloud.txt ]]
	then
	sudo rm -f /home/"$user"/.supremecloud.txt
	fi
	while read line; do
		if [[ "$line" == "["*"]" ]]
		then
		echo $line | cut -d "[" -f2 | cut -d "]" -f1 >> /home/"$user"/.supremecloud.txt
		fi
	done < /home/"$user"/.config/rclone/rclone.conf
else
rclone config
fi
}
#------------------------------------------------------------------------------------------------
function selectcloud ()
{
cloudlist=()
if [[ -f /home/"$user"/.supremecloud.txt ]]
then
instfmt "Select cloud storage"
	while read line; do
	cloudlist+=( "$line" )
	done < /home/"$user"/.supremecloud.txt
	for ((i=0; i<${#cloudlist[@]}; i++))
	do
	echo -e "($i) ${cloudlist[$i]}"
	done
	read gdit143
	v55=$( echo $(numval "$gdit143") )
	if [ "$v55" == "p" ]
	then
		if [[ $gdit143 < ${#cloudlist[@]} ]]
		then
		cldopt="${cloudlist[$gdit143]}:/"
		fi
	else
	echo -e "\e[91mBad Input\e[0m"
	fi
else
echo -e "\e[91mCloud Storage not configured. Configure cloud from option Manage Cloud\e[0m"
fi
}

#------------------------------------------------------------------------------------------------
function cloudupload ()
{
checkInternet || return
if [[ -z $cldopt ]]
then
echo -e "\e[91mNo cloud storage selected\e[0m"
else
	if [ "${#arraymock[@]}" != 0 ]
	then
	cldactn="copy"
	instfmt "Do you want to upload to a particular directory?(y/n)"
	read gditoptn3
		if [ "$gditoptn3" == "y" ]
		then
		tempmock=( "${arraymock[@]}" )
		cloudnavig
			if [[ -z $cldopt ]]
			then
			return
			else
			rcfeed rmc "" "$gdn1"/"${arraymock[0]}" "" 5
			fi 
		else
		tempmock=( "${arraymock[@]}" )
		rcfeed rmc "" "$cldopt"
		fi
	arraymock=()
	fi
fi
}

#------------------------------------------------------------------------------------------------
function rcfeed ()
{
dps="${4:+/}"
dpd="${5:+/}"
case "$1" in 
copy)for gdemt15 in "${tempsortfile[@]}"
     do
     rclone copy "$2""$dps""$gdemt15" "$3" -v
     done
     for gdemt15 in "${tempsortdir[@]}"
     do
     rclone copy "$2""$dps""$gdemt15" "$3""$dpd""$gdemt15" -v
     done;;
move)for gdemt15 in "${tempsortfile[@]}"
     do
     rclone move "$2""$dps""$gdemt15" "$3" -v
     done
     for gdemt15 in "${tempsortdir[@]}"
     do
     rclone move "$2""$dps""$gdemt15" "$3""$dpd""$gdemt15" -v
     rcfcount=$(rclone size "$2""$dps""$gdemt15" | sed -n 1p | awk '{print $3}')
	     if [[ $rcfcount == 0 ]]
	     then
	     rclone purge "$2""$dps""$gdemt15"
	     fi 
     done;;
delete)for gdemt4 in "${sortfile[@]}"
       do
       rclone delete "$2""$dps""$gdemt4" -v
       done
       for gdemt4 in "${sortdir[@]}"
       do
       rclone purge "$2""$dps""$gdemt4" -v
       done;;
rmc)for gdemt15 in "${tempmock[@]}"
    do
    Q=$( echo "$gdemt15" | rev | cut -d '/' -f 1 | rev )
	    if [[ -d "$gdemt15" ]]
	    then
	    rclone $cldactn "$gdemt15" "$3""$dpd""$Q" -v
		    if [ "$cldactn" == "move" ]
		    then
		    rcfcount=$(rclone size "$gdemt15" | sed -n 1p | awk '{print $3}')
			    if [[ $rcfcount == 0 ]]
			    then
			    rclone purge "$gdemt15"
			    fi 
		    fi
	    else					
	    rclone $cldactn "$gdemt15" "$3" -v
	    fi
    done;;
esac
}

#------------------------------------------------------------------------------------------------
function cloudit ()
{
if [[ -f /home/"$user"/.supremecloud.txt ]]
then
checkInternet || return
sudo rm -rf /home/"$user"/Supremetemp/*
unset gdit1
instfmt "Select an option"
echo -e "(1)Cloud File Explorer\n(2)Configure Cloud"
read cldit
	case "$cldit" in
	1)selectcloud
	  if [[ -z "$cldopt" ]]
	  then
	  return
	  fi
	  oprpt="g"
	  while [[ "$oprpt" == "g" ]]
	  do
	  cloudnavig
		  if [ "${#arraymock[@]}" != 0 ]
		  then
		  instfmt "Select an option"
		  echo -e "(1)\e[32m⏏\e[0m  Open\n(2)\e[92m⬇\e[0m  Download\n(3)\e[90m📖\e[0m Copy\n(4)\e[95m📑\e[0m Move\n(5)\e[91m🚮\e[0m Delete\n(h)\e[93m🏠\e[0m Go Home"
		  read cldit1
			oprpt="y"
			while [[ "$oprpt" == "y" ]]
			do
				case "$cldit1" in
				1)tempsortfile=( "${sortfile[@]}" )
		  	 	  tempsortdir=( "${sortdir[@]}" )
					if [ "$gdn1" == "$cldopt" ]
					then
					rcfeed copy $cldopt "/home/$user/Supremetemp" "" 5
					else
					rcfeed copy "$gdn1" "/home/$user/Supremetemp" 4 5
					fi
				  decarray=( /home/"$user"/Supremetemp/* )
				  for gdnavemt in "${decarray[@]}"
				  do
				  xdg-open "$gdnavemt" > /dev/null 2>&1
				  done
				  instfmt "Do you want to perform operations on the opened file(s)?(y/n)"
				  read gdn22
					case "$gdn22" in
					y|Y)colorfmt "${arraymock[@]}"
					    instfmt "Select an option"
					    echo -e "(1)\e[92m⬇\e[0m  Download\n(2)\e[90m📖\e[0m Copy\n(3)\e[95m📑\e[0m Move\n(4)\e[91m🚮\e[0m Delete\n(h)\e[93m🏠\e[0m Go Home"
					    read cldit2
						case "$cldit2" in
						1)cldit1=2;;
						2)cldit1=3;;
						3)cldit1=4;;
						4)cldit1=5;;
						h)cldit1="h";;
						esac;;
					*)oprpt="g"
					  sudo rm -rf /home/"$user"/Supremetemp/*;;
					esac;;
				2)oprpt="n"
				  gdit1="DOWNLOAD";;
				3)oprpt="n"
				  gdit1="COPY";;
				4)oprpt="n"
				  gdit1="MOVE";;
				5)oprpt="n"
				  gdit1="DELETE";;
				h|H)oprpt="n"
				    homekey="y";;
				*)oprpt="n"
				  echo -e "\e[91mBad input\e[0m";;
				esac
			done
		  fi
	  done;;
	2)checkInternet || return
	  rclone config;;
	*)echo -e "\e[91mBad input\e[0m";;	
	esac 
	case "$gdit1" in
	DOWNLOAD)if [ "${#arraymock[@]}" != 0 ]
	         then
		 tempsortfile=( "${sortfile[@]}" )
	  	 tempsortdir=( "${sortdir[@]}" )
	  	 instfmt "Select destinatin folder"
	  	 feeder
			 if [ "${#arraymock[@]}" != 0 ]
			 then
				if [ "$gdn1" == "$cldopt" ]
				then
				rcfeed copy $cldopt "${arraymock[0]}" "" 5
				else
				rcfeed copy "$gdn1" "${arraymock[0]}" 4 5
				fi
			 fi
	  	 fi;;
	DELETE)if [ "${#arraymock[@]}" != 0 ]
	       then
	       instfmt "Are you sure you want to delete the selected files from $gdn1?(y/n)"
	       read gdit63
			case "$gdit63" in
			y|Y)if [ "$gdn1" == "$cldopt" ]
			    then
			    rcfeed delete $cldopt
			    else
			    rcfeed delete "$gdn1" "" 4
			    fi;;
			esac
	  	fi;;
	COPY|MOVE)tempsortdir=( "${sortdir[@]}" )
		  tempsortfile=( "${sortfile[@]}" )
		  gdntemp="$gdn1"
		  cldtemp="$cldopt"
		  if [[ ("${#tempsortdir[@]}" == 0) && ("${#tempsortfile[@]}" == 0) ]]
		  then
		  return
		  else
		  instfmt "Select Destination"
		  echo -e "(1)cloud storage\n(2)local"
		  read gdit55
			case $gdit55 in
			1)selectcloud
			cloudnavig;;
			2)feeder;;
			*)return;;
			esac
			if [[ "$homekey" == "y" ]] || [[ -z "$cldopt" ]]
			then
			return
			else
				case $gdit1 in
				MOVE)cldactn="move";;
				COPY)cldactn="copy";;
				*)return;;
				esac
				case "$gdit55" in
				2)if [ "$gdn1" == "$cldopt" ]
				  then
					if [ "${#arraymock[@]}" == 0 ]
					then
					echo -e "\e[91mNo destination directory selected\e[0m"
					else
					rcfeed $cldactn "$gdn1" "${arraymock[0]}" "" 5
					fi
				  else
					if [ "${#arraymock[@]}" == 0 ]
					then
					echo -e "\e[91mNo destination directory selected\e[0m"
					else
					rcfeed $cldactn "$gdn1" "${arraymock[0]}" 4 5
					fi
				  fi;;
				1)if [[ ("$gdn1" == "$cldopt") && ("$gdntemp" == "$cldtemp") ]]
				  then
				  echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
					if [ "${#arraymock[@]}" == 0 ]
					then
					rcfeed $cldactn "$gdntemp" "$gdn1"
					else
					rcfeed $cldactn "$gdntemp" "$gdn1""${arraymock[0]}" "" 5
					fi
				  elif [[ ("$gdn1" != "$cldopt") && ("$gdntemp" == "$cldtemp") ]]
				  then
				  echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
				  rcfeed $cldactn "$gdntemp" "$gdn1"/"${arraymock[0]}" "" 5
				  elif [[ ("$gdn1" == "$cldopt") && ("$gdntemp" != "$cldtemp") ]]
				  then
				  echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
					if [ "${#arraymock[@]}" == 0 ]
					then
					rcfeed $cldactn "$gdntemp" "$gdn1" 4
					else
					rcfeed $cldactn "$gdntemp" "$gdn1""${arraymock[0]}" 4 5 
					fi
				  elif [[ ("$gdn1" != "$cldopt") && ("$gdntemp" != "$cldtemp") ]]
				  then
				  echo -e "\e[91msource:$gdntemp destination:$gdn1\e[0m"
				  rcfeed $cldactn "$gdntemp" "$gdn1"/"${arraymock[0]}" 4 5
				  fi;;
				esac
			fi
		  fi;;	
	esac
sudo rm -rf /home/"$user"/Supremetemp/*
unset gdit1
else
echo -e "\e[91mCloud Storage not configured\e[0m"
fi
}

#------------------------------------------------------------------------------------------------
function load_delay ()
{
if [[ "$homekey" == "y" ]]
then
return
else
echo -e "\e[41;97;10;85mEnter any key\e[0m"
read delay
fi
}
#------------------------------------------------------------------------------------------------
function operations ()
{
instfmt "Select an option"
echo -e "(1)\e[32m⏏\e[0m  Open\n(2)\e[90m📖\e[0m Copy\n(3)\e[95m📑\e[0m Move\n(4)\e[91m🚮\e[0m Delete\n(5)\e[36m📓\e[0m Rename\n(6)\e[94m➡\e[0m  Send to Device\n(7)\e[92m⬆\e[0m  Upload to Cloud\n(8)\e[92m⤴\e[0m  Move to cloud\n(9)\e[96mℹ\e[0m  Properties\e[0m\n(h)\e[93m🏠\e[0m Go Home"
while [ "$opnr" == "e" ]
do
read opn11
	case $opn11 in
	1)opnr="f"
	  for opnemt in "${arraymock[@]}"
	  do
	  xdg-open "$opnemt" > /dev/null 2>&1
	  done;;
	2)opnr="f"
	  tempmock=( "${arraymock[@]}" )
	  while [ "$opnr" == "f" ]
	  do
	  instfmt "Select destination folder"
	  feeder
		  if [[ -d "${arraymock[0]}" ]]
		  then
		  opnr="g"
			for opnemt in "${tempmock[@]}"
			do
			kcm -c "$opnemt" "${arraymock[0]}"
			done
		  else
		  echo -e "\e[91mNot a directory\e[0m"
		  fi
	  done;;
	3)opnr="f"
	  tempmock=( "${arraymock[@]}" )
	  while [ "$opnr" == "f" ]
	  do
	  instfmt "Select destination folder"
	  feeder
		  if [[ -d "${arraymock[0]}" ]]
		  then
		  opnr="g"
			for opnemt in "${tempmock[@]}"
			do
			qbar=0
			kcm -m "$opnemt" "${arraymock[0]}"
			done
		  else
		  echo -e "\e[91mNot a directory\e[0m"
		  fi
	  done;;
	4)opnr="f"
	  instfmt "Are you sure you want to delete the file(s)?(y/n)"
	  read opn032
	  if [ "$opn032" == "y" ]
	  then 
		for opnemt in "${arraymock[@]}"
		do
			if [[ "$opnemt" = *"/1000/gvfs/mtp"* ]]
			then
				if [[ -d /home/"$user"/Supremetemp ]]
				then
				kcm -m "$opnemt" /home/"$user"/Supremetemp/
				else
				mkdir /home/"$user"/Supremetemp
				kcm -m "$opnemt" /home/"$user"/Supremetemp/
				fi 
			sudo rm -vrf /home/"$user"/Supremetemp/*
			else
			sudo rm -vrf "$opnemt"
			fi
		done
	  fi;;
	5)opnr="f"
	  Q=$( echo "${arraymock[0]}" | rev | cut -d '/' -f 1 | rev )
	  R=$( echo "${arraymock[0]}" | rev | cut -d '/' -f2- | rev )
	  instfmt "Current Name: $Q"
	  instfmt "Enter New Name"
	  read newname
	  instfmt "Are you sure you want to rename $Q to $newname?(y/n)"
	  read opn88
	  if [ "$opn88" == "y" ]
	  then
	  mv "${arraymock[0]}" "$R"/"$newname"
	  fi;;
	6)opnr="f"
	  quick f
	  if [ "${#quickarray[@]}" != 0 ]
	  then
	  instfmt "Select Device | h [Home]"
		while [ "$opnr" == "f" ]
		do
		read opn99
		v111=$( echo $(numval "$opn99") )
			if [[ ("$v111" == "p") ]]
			then
				if (($opn99<$j)) > /dev/null 2>&1
			  	then
				opnr="g"
					for opnemt in "${arraymock[@]}"
					do
					kcm -c "$opnemt" "${quickarray[$opn99]}"
					done
				else
				echo -e "\e[91mBad input\e[0m"
				fi
			elif [ "$opn99" == "h" ]
			then
			opnr="g"
			homekey="y"
			else
			echo -e "\e[91mBad input\e[0m"
			fi
		done
	  else
	  return
	  fi;;
	7)opnr="f"
	  rcver=$( rclone -V | sed -n 1p | cut -d ' ' -f2 )
	  if [[ "$rcver" != "v1.4"* ]]
	  then
	  curl https://rclone.org/install.sh | sudo bash
	  fi
	  selectcloud
	  cloudupload;;
	8)opnr="f"
	  selectcloud
	  if [[ -z "$cldopt" ]]
	  then
	  return
	  else
	  tempmock=( "${arraymock[@]}" )
	  cloudnavig
	  cldactn="move"
	  	if [[ ("$gdn1" == "$cldopt") && ("${#arraymock[@]}" == 0) ]]
		then
		rcfeed rmc "" "$gdn1"
		else
		rcfeed rmc "" "$gdn1"/"${arraymock[0]}" "" 5 
		fi
	  fi;;
	9)opnr="f"
	  for opnemt in "${arraymock[@]}"
	  do
	  echo -e "________________________________________________________________________________"
	  det "$opnemt"
	  done;;
	h)opnr="f"
	  homekey="y";;
	*)echo -e "\e[91mInvalid Choice\e[0m";;
	esac
done
}

#------------------------------------------------------------------------------------------------
function config_applist ()
{
opnr="e"
navdoor="GEN"
genlist=()
templist=()
displaylist=()
instfmt "Select an option | h [Home]"
echo -e "(1)Add app(s) to list\n(2)Remove app(s) from list"
read cal1
case $cal1 in
1)addnew=y
  while [[ "$addnew" == "y" ]]
  do
  genlist=()
  templist=()
  instfmt "Enter command to open app"
  read cal2
  instfmt "Enter display name for app"
  read cal3
	  if [[ -z $cal3 ]] || [[ "$cal3" == "" ]]; then
	  cal3=$cal2
	  fi
	  if [[ -f /home/"$user"/.supreme_app_config ]]
	  then
	  	while read line; do
			case "$line" in
			"#+-"*)genlist+=( "$line" );;
			"-#"*)templist+=( "$line" );;
			esac
		done < /home/"$user"/.supreme_app_config
	  echo -n > /home/"$user"/.supreme_app_config
	  fi
  genlist+=( "#+-""$cal3" )
  templist+=( "-#""$cal2" )
	  for ((i=0; i<${#genlist[@]}; i++))
	  do
	  echo "${genlist[$i]}" >> /home/"$user"/.supreme_app_config
	  echo "${templist[$i]}" >> /home/"$user"/.supreme_app_config
	  done
  instfmt "Do you want to add more apps to list? (y/n)"
  read addnew
  done;;
2)if [[ -f /home/"$user"/.supreme_app_config ]]
  then
  wc -l /home/"$user"/.supreme_app_config > /dev/null 2>&1 || { echo -e "\e[91mNo app added to list\e[0m"; return; }
  linecount=$( wc -l /home/"$user"/.supreme_app_config | cut -d ' ' -f1 )
	  if [[ "$linecount" != 0 ]]
	  then
		while read line; do
			case "$line" in
			"#+-"*)genlist+=( "$line" );;
			"-#"*)templist+=( "$line" );;
			esac
		done < /home/"$user"/.supreme_app_config
	  instfmt "Select apps you need to remove"
	  genfmt "${genlist[@]}"
	  read cal4
	  IFS=', ' read -r -a srchopt <<< "$cal4"
	  actionitems
	  instfmt "Are you sure you want to remove selected app(s) from list? (y/n)"
	  read cal5
	  	case "$cal5" in
		y|Y)SAVEIFS=$IFS
		    IFS=$(echo -en "\n\b")
		    genlist=( $(printf "%s\n" "${genlist[@]}" "${arraymock[@]}" | sort | uniq -u) )
		    for emt in "${srchopt[@]}"
		    do
		    remlist+=( "${templist[$emt]}" )
		    done
		    templist=( $(printf "%s\n" "${templist[@]}" "${remlist[@]}" | sort | uniq -u) )
		    IFS=$SAVEIFS
		    echo -n > /home/"$user"/.supreme_app_config
		    for ((i=0; i<${#genlist[@]}; i++))
		    do
		    echo "${genlist[$i]}" >> /home/"$user"/.supreme_app_config
		    echo "${templist[$i]}" >> /home/"$user"/.supreme_app_config
		    done;;
		 esac
	  else
	  echo -e "\e[91mNo app added to list\e[0m"
	  fi
  else
  echo -e "\e[91mNo app added to list\e[0m"
  fi;;
h|H)homekey="y";;
*)echo -e "\e[91mBad input\e[0m";;
esac
}

#------------------------------------------------------------------------------------------------
function manage_apps ()
{
genlist=()
templist=()
instfmt "Select an option | h [home]"
echo -e "(1)Open Apps\n(2)Configure App List"
read appvar
case $appvar in
1)appnamelist=( "\e[94m🌐\e[0m Fire Fox" "\e[93m📅\e[0m Calculator" "🛠  Settings" )
  executionlist=( firefox gnome-calculator gnome-control-center )
  if [[ -f /home/"$user"/.supreme_app_config ]]
  then
	while read line; do
	case "$line" in
	"#+-"*)genlist+=( "$line" );;
	"-#"*)Q=$( echo "$line" | cut -d '#' -f 2 )
	      templist+=( "$Q" );;
	esac
	done < /home/"$user"/.supreme_app_config
  appnamelist+=( "${genlist[@]}" )
  executionlist+=( "${templist[@]}" )
  fi
  instfmt "Select an option | h [Home]"
  genfmt "${appnamelist[@]}"
  while [ "$opnr" == "y" ]
  do
  read opn209
  v808=$( echo $(numval "$opn209") )
	case "$v808" in
	p)if(($opn209<$a)) > /dev/null 2>&1
	  then
          opnr="e"
		   if command -v ${executionlist[$opn209]} &>/dev/null; then
		   ${executionlist[$opn209]}
		   else
	  	   echo -e "\e[91m${appnamelist[$opn209]} [${executionlist[$opn209]}] not installed\e[0m"
	  	   fi
 	   else
	   echo -e "\e[91mBad input\e[0m"
	   fi;;
	*)case "$opn209" in
	  h|H)opnr="e"
    	      homekey="y";;
	  *)echo -e "\e[91mBad input\e[0m";;
	  esac;;
	esac
  done;;
2)config_applist;;
h|H)opnr="e"
    homekey="y";;
*)opnr="e"
  echo -e "\e[91mBad input\e[0m";;
esac
}


#------------------------------------------------------------------------------------------------
function select_cs ()
{
unset csopt
navdoor="GEN"
genlist=()
if [[ -d /home/"$user"/.supreme_cs ]]
then
	for file in /home/"$user"/.supreme_cs/*
	do
	genlist+=( "$file" )
	done
	if [[ "${#genlist[@]}" != 0 ]] && [[ "${genlist[@]}" != "/home/$user/.supreme_cs/*" ]]
	then
	instfmt "Select script"
		for ((i=0; i<${#genlist[@]}; i++))
		do
		echo -e "($i) ${genlist[$i]}"
		done
        	read csopt
	else
	echo -e "\e[91mNo script added\e[0m"
	fi
else
echo -e "\e[91mNo script added\e[0m"
fi
}

#------------------------------------------------------------------------------------------------
function custom_scripts ()
{
instfmt "Select an option | h [Home]"
echo -e "(1)Add script\n(2)Remove script(s)\n(3)Modify script\n(4)Execute script\n(5)Run Commands"
read cs1
case "$cs1" in
1)if [[ -d /home/"$user"/.supreme_cs ]]
  then
  instfmt "Enter file name"
  read csfn
  sudo touch /home/"$user"/.supreme_cs/"$csfn"
  sudo xdg-open /home/"$user"/.supreme_cs/"$csfn"
  else
  sudo mkdir /home/"$user"/.supreme_cs
  instfmt "Enter file name"
  read csfn
  sudo touch /home/"$user"/.supreme_cs/"$csfn"
  sudo xdg-open /home/"$user"/.supreme_cs/"$csfn"
  fi;;
2)select_cs
  v180=$(echo $(numval "$csopt"))
  IFS=', ' read -r -a srchopt <<< "$csopt"
  if [[ "$v180" == "p" ]]
  then
  actionitems
	  if [[ "${#arraymock[@]}" != 0 ]]
	  then
	  instfmt "Are you sure you want to remove selected items?(y/n)"
	  read cs2
		  case "$cs2" in
		  y|Y)for csemt in "${arraymock[@]}"
		      do
		      sudo rm -vrf "$csemt"
		      done;;
		  *)return;;
		  esac
	   fi
   fi;;
3)select_cs
  v184=$(echo $(numval "$csopt"))
  if [[ "$v184" == "p" ]]
  then
  	if (("$csopt"<$i)) > /dev/null 2>&1 || echo -e "\e[91mBad Input\e[0m"
	then
  	sudo xdg-open "${genlist[$csopt]}"
	fi
  fi;;
4)select_cs
  v185=$(echo $(numval "$csopt"))
  if [[ "$v185" == "p" ]]
  then
	csrpt="y"
	while [ "$csrpt" = "y" ]
	do
	  	if (("$csopt"<$i)) > /dev/null 2>&1 || echo -e "\e[91mBad Input\e[0m" 
		then
	  	. "${genlist[$csopt]}"
		instfmt "Enter commands(to call custom functions in your script)  | h [Home]"
		read cscmd
			case "$cscmd" in
			h|H)csrpt="n"
			    homekey="y"
			    return;;
			*)homekey="y"
			  $cscmd
			  instfmt "Do you want to continue executing your script?(y/n)"
			  read csrpt;;
			esac
		fi
	done
  fi;;
5)csrpt="y"
  homekey="y"
  while [ "$csrpt" == "y" ]
  do
  instfmt "Enter command"
  read cs11
  $cs11
  instfmt "Do you want to continue with other commands?(y/n)"
  read csrpt
  done;;
h|H)homekey="y";;
*)echo -e "\e[91mBad input\e[0m";;
esac
}

#------------------------------------------------------------------------------------------------
function config_qa ()
{
banner
genlist=()
arraymock=()
navdoor="GEN"
instfmt "Select an option"
echo -e "(1)Add folder(s) to list\n(2)Remove folder(s) from list"
read cqa
case $cqa in
1)feeder
  case "${#arraymock[@]}" in
  0)echo "\e[91mNo items selected\e[0m";;
  *)lc=0
    for emt in "${arraymock[@]}"
    do
    	if [[ -d "$emt" ]]
        then
	genlist+=( "$emt" )
	lc=$(($lc+1))
        fi
    done
    templist=( "${genlist[@]}" )
    if [[ -f /home/"$user"/.supreme_qaconfig.txt ]]
    then
	while read line; do
	genlist+=( "$line" )
	done < /home/"$user"/.supreme_qaconfig.txt
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    genlist=( $(remove_array_dups "${genlist[@]}") )
    echo -n > /home/"$user"/.supreme_qaconfig.txt 
    fi
    case "${#genlist[@]}" in
    0)echo -e "\e[91mNo directories selected\e[0m";;
    *)IFS=$SAVEIFS
      colorfmt "${templist[@]}"
      echo -e "\e[91mAdded $lc directorie(s) to list\e[0m"
      for emt in "${genlist[@]}"
      do
      echo "$emt" >> /home/"$user"/.supreme_qaconfig.txt
      done;;
    esac
  esac;;
2)wc -l /home/"$user"/.supreme_qaconfig.txt > /dev/null 2>&1 || { echo -e "\e[91mNo folder added\e[0m"; return; }
  linecount=$( wc -l /home/"$user"/.supreme_qaconfig.txt | cut -d ' ' -f1 )
  if [[ -f /home/"$user"/.supreme_qaconfig.txt ]] && [[ "$linecount" != 0 ]]
  then
	while read line; do
	genlist+=( "$line" )
	done < /home/"$user"/.supreme_qaconfig.txt
  colorfmt "${genlist[@]}"
  instfmt "Select folder(s)"
  read cqa1
  v028=$( echo $(numval "$cqa1") )
	  if [ "$v028" == "p" ]
	  then
	  IFS=', ' read -r -a srchopt <<< "$cqa1"
          actionitems
          instfmt "Do you want to remove selected folder(s) from list?(y/n)"
	  read cqa2
     	  	case "$cqa2" in
		y|Y)SAVEIFS=$IFS
		    IFS=$(echo -en "\n\b")
		    genlist=( $(printf "%s\n" "${genlist[@]}" "${arraymock[@]}" | sort | uniq -u) )
		    IFS=$SAVEIFS;;
		*)return;;
		esac
	  else
     	  echo -e "\e[91mBad input\e[0m"
	  fi
  echo -n > /home/"$user"/.supreme_qaconfig.txt
	  for emt in "${genlist[@]}"
	  do
	  echo "$emt" >> /home/"$user"/.supreme_qaconfig.txt
	  done
  else
  echo -e "\e[91mNo folder added\e[0m"
  fi;;
*)echo -e "\e[91mBad input\e[0m";;
esac
}

#------------------------------------------------------------------------------------------------
function config_theme()
{
banner
instfmt "Select a theme"
echo -e "(1)Aqua\n \e[44m       \e[0m\n \e[46m       \e[0m\n(2)Forest\n \e[42m       \e[0m\n \e[103m       \e[0m\n(3)Classic\n \e[40m       \e[0m\n \e[100m       \e[0m\n(4)Solar\n \e[41m       \e[0m\n \e[103m       \e[0m\n(5)Carbon\n \e[100m       \e[0m\n \e[40m       \e[0m\n(6)Default\n \e[100m       \e[0m\n \e[101m       \e[0m"
read thm
if [[ -f /home/"$user"/.supremetheme.txt ]]
then
chmod 666 /home/"$user"/.supremetheme.txt
fi
case "$thm" in
1)echo -n > /home/"$user"/.supremetheme.txt
  echo pri=\""\e[44m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo sec=\""\e[46m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo logopri=\""\e[46;37;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo logosec=\""\e[47;34;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo userpri=\""\e[46;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1=\""\e[44;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2=\""\e[100;96;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1fill=\""\e[44m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2fill=\""\e[100m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmt=\""\e[44;37;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmtfill=\""\e[44m \e[0m"\" >> /home/"$user"/.supremetheme.txt;;
2)echo -n > /home/"$user"/.supremetheme.txt
  echo pri=\""\e[42m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo sec=\""\e[103m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo logopri=\""\e[103;34;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo logosec=\""\e[46;33;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo userpri=\""\e[103;30;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1=\""\e[42;37;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2=\""\e[40;32;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1fill=\""\e[42m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2fill=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmt=\""\e[42;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmtfill=\""\e[42m \e[0m"\" >> /home/"$user"/.supremetheme.txt;;
3)echo -n > /home/"$user"/.supremetheme.txt
  echo pri=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo sec=\""\e[100m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo logopri=\""\e[100;31;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo logosec=\""\e[101;30;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo userpri=\""\e[100;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1=\""\e[40;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2=\""\e[107;30;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1fill=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2fill=\""\e[107m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmt=\""\e[40;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmtfill=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt;;
4)echo -n > /home/"$user"/.supremetheme.txt
  echo pri=\""\e[41m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo sec=\""\e[103m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo logopri=\""\e[103;30;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo logosec=\""\e[40;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo userpri=\""\e[103;90;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1=\""\e[41;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2=\""\e[107;31;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1fill=\""\e[41m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2fill=\""\e[107m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmt=\""\e[41;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmtfill=\""\e[41m \e[0m"\" >> /home/"$user"/.supremetheme.txt;;
5)echo -n > /home/"$user"/.supremetheme.txt
  echo pri=\""\e[100m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo sec=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo logopri=\""\e[40;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo logosec=\""\e[100;37;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo userpri=\""\e[40;93;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1=\""\e[100;37;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2=\""\e[40;97;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp1fill=\""\e[100m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo cfmtp2fill=\""\e[40m \e[0m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmt=\""\e[100;36;1;82m"\" >> /home/"$user"/.supremetheme.txt
  echo ifmtfill=\""\e[100m \e[0m"\" >> /home/"$user"/.supremetheme.txt;;
6)sudo rm -f /home/"$user"/.supremetheme.txt;;
*)echo -e "\e[91mBad input\e[0m";;
esac
if [[ -f /home/"$user"/.supremetheme.txt ]]
then
chmod 444 /home/"$user"/.supremetheme.txt
fi
}

#------------------------------------------------------------------------------------------------
function preferences ()
{
instfmt "Select an option"
echo -e "(1)Configure Quick Access Folders\n(2)Themes"
read prfn
case $prfn in
1)config_qa;;
2)config_theme;;
*)echo -e "\e[91mBad input\e[0m";;
esac
}

#------------------------------------------------------------------------------------------------
user=$(whoami)
if [ "$user" == "root" ]
then
echo -e "\e[91msupreme doesn't work for root user\e[0m"
else
again="y"
while [ "$again" == "y" ]
do
unset homekey
qbar=1
flag=0
opnr="y"
banner

instfmt "Select an option"
echo -e "(1)\e[36m🔡\e[0m  Manage Apps\n(2)\e[93m📂\e[0m Manage Files \n(3)📱 Manage Phone\n(4)\e[91m🎞\e[0m  Manage USB\n(5)\e[94m🌩 \e[0m Manage Cloud\n(6)🔗 Manage Custom Scripts\n(p)⚙  Preferences\n(x)\e[91m✖\e[0m  Exit"
	while [ "$opnr" == "y" ]
	do
	read opn2
		case "$opn2" in
		1)banner
		  manage_apps
		  load_delay;;
		2)while [ "$opnr" == "y" ]
		  do
		  feeder
			if [ "${#arraymock[@]}" != 0 ]
			then
			opnr="e"
			operations
			elif [ "$opnr" == "y" ]
			then
			echo -e "\e[91mBad input\e[0m"
			fi
		  done
		  load_delay;;
		3)opnr="e"
		  andcop
		  load_delay;;
		4)opnr="e"
		  usbcop
		  load_delay;;
		5)opnr="e"
		  banner
		  instfmt "Supreme uses package 'rclone' for cloud storage operations"
		  cloudconfig
		  rcver=$( rclone -V | sed -n 1p | cut -d ' ' -f2 )
			if [[ "$rcver" != "v1.4"* ]]
			then
			curl https://rclone.org/install.sh | sudo bash
			fi
		   cloudit
		   load_delay;;
		6)opnr="e"
		  banner
		  custom_scripts
		  load_delay;;
		p|P)opnr="e"
		  preferences
		  load_delay;;
		x|X)opnr="e"
		  instfmt "To report bug: mail to kiran.vkvr@gmail.com or visit https://github.com/Kiran-Bose/supreme"
		  exec bash
		  return;;
		*)echo -e "\e[91mBad input\e[0m";;
		esac
	done
done
fi

#------------------------------------------------------------------------------------------------

